import { defineComponent, h, inject, unref, computed, provide } from 'vue';

var Switch = defineComponent({
    props: ["modelValue"],
    setup(props, { emit }) {
        const toggle = () => {
            emit("update:modelValue", !props.modelValue);
        };
        const onClick = () => {
            toggle();
        };
        return {
            onClick,
        };
    },
    render() {
        const children = this.$slots.default?.() || [];
        // TODO 使用 jsx 可以优化生成的 vnode
        return h("button", { onClick: this.onClick }, children);
    },
});

// 状态：
var Button = defineComponent({
    props: ["modelValue"],
    setup(props, { emit }) {
        const enter = () => {
            emit("update:modelValue", true);
        };
        const putUp = () => {
            emit("update:modelValue", false);
        };
        const onMouseup = () => {
            putUp();
        };
        const onMousedown = () => {
            enter();
        };
        return {
            onMouseup,
            onMousedown,
        };
    },
    render() {
        const children = this.$slots.default?.() || [];
        // TODO 使用 jsx 可以优化生成的 vnode
        return h("button", { onMouseup: this.onMouseup, onMousedown: this.onMousedown }, children);
    },
});

var SliderButton = defineComponent({
    setup() {
        const context = inject("sliderContext");
        let dragging = false;
        const onDragEnd = () => {
            dragEnd();
            removeEventListeners();
        };
        const onMousedown = (e) => {
            dragStart(e);
            addEventListeners();
        };
        function removeEventListeners() {
            window.removeEventListener("mousemove", onDragging);
            window.removeEventListener("touchmove", onDragging);
            window.removeEventListener("mouseup", onDragEnd);
            window.removeEventListener("touchend", onDragEnd);
        }
        function addEventListeners() {
            window.addEventListener("mousemove", onDragging);
            window.addEventListener("touchmove", onDragging);
            window.addEventListener("mouseup", onDragEnd);
            window.addEventListener("touchend", onDragEnd);
        }
        function dragEnd() {
            dragging = false;
        }
        let startX = 0;
        let startY = 0;
        let startPosition = 0;
        const dragStart = (e) => {
            dragging = true;
            if (e.type === "touchstart") {
                e.clientY = e.touches[0].clientY;
                e.clientX = e.touches[0].clientX;
            }
            startY = e.clientY;
            startX = e.clientX;
            startPosition = parseFloat(unref(context.currentPosition));
        };
        const onDragging = (e) => {
            if (!dragging)
                return;
            if (e.type === "touchmove") {
                e.clientY = e.touches[0].clientY;
                e.clientX = e.touches[0].clientX;
            }
            if (context.vertical) {
                // 上下
                const currentY = e.clientY;
                const sliderHeight = 400;
                let diffY = ((currentY - startY) / sliderHeight) * 100;
                context.setPosition(diffY + startPosition);
            }
            else {
                // 处理 左右 移动
                const currentX = e.clientX;
                const sliderWidth = 400;
                let diffX = ((currentX - startX) / sliderWidth) * 100;
                context.setPosition(diffX + startPosition);
            }
        };
        return {
            onMousedown,
        };
    },
    render() {
        const children = this.$slots.default?.() || [];
        return h("div", {
            onMousedown: this.onMousedown,
        }, children);
    },
});

var Slider = defineComponent({
    props: {
        modelValue: {
            type: Number,
            default: 0,
        },
        min: {
            type: Number,
            default: 0,
        },
        max: {
            type: Number,
            default: 100,
        },
        step: {
            type: Number,
            default: 1,
        },
        vertical: {
            type: Boolean,
            default: false,
        },
    },
    setup(props, { emit }) {
        const currentPosition = computed(() => `${((props.modelValue - unref(props.min)) /
            (unref(props.max) - unref(props.min))) *
            100}%`);
        const api = {
            vertical: props.vertical,
            currentPosition,
            setPosition(newPosition) {
                if (newPosition === null || isNaN(newPosition))
                    return;
                if (newPosition < 0) {
                    newPosition = 0;
                }
                else if (newPosition > 100) {
                    newPosition = 100;
                }
                const lengthPerStep = 100 / ((props.max - props.min) / props.step);
                console.log(props.step);
                const steps = Math.round(newPosition / lengthPerStep);
                let value = steps * lengthPerStep * (props.max - props.min) * 0.01 + props.min;
                value = parseFloat(value.toFixed(1));
                emit("update:modelValue", value);
            },
        };
        provide("sliderContext", api);
    },
    render() {
        const children = this.$slots.default?.() || [];
        return h("div", children);
    },
});

export { Button as E3Button, Slider as E3Slider, SliderButton as E3SliderButton, Switch as E3Switch };
